{"version":3,"sources":["./src/app/dto/credentials.ts","./src/app/service/doctor.service.ts","./src/environments/environment.ts","./src/app/component/patient-doctor-quest/patient-doctor-quest.component.ts","./src/app/component/patient-doctor-quest/patient-doctor-quest.component.html","./src/app/component/doctor-overview/doctor-overview.component.ts","./src/app/component/doctor-overview/doctor-overview.component.html","./src/app/service/user.service.ts","./src/app/component/header/header.component.html","./src/app/component/header/header.component.ts","./src/app/dto/accepted-quest.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/component/doctor/doctor.component.ts","./src/app/component/doctor/doctor.component.html","./src/app/service/quest.service.ts","./src/app/component/error-dialog/error-dialog.component.ts","./src/app/component/error-dialog/error-dialog.component.html","./src/app/service/authentication-doctor.service.ts","./src/app/service/auth-guard-doctor.service.ts","./src/app/component/doctor-logout/doctor-logout.component.ts","./src/app/component/doctor-logout/doctor-logout.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class Credentials {\n  constructor(public email: string,\n              public password: string) {}\n}\n","import { Injectable } from '@angular/core';\nimport {environment} from '../../environments/environment';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Doctor} from '../dto/doctor';\nimport {Credentials} from '../dto/credentials';\n\nconst baseUri = environment.backendUrl + '/doctors';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DoctorService {\n\n  private httpOption = {headers: new HttpHeaders({'Content-Type': 'application/json'})};\n\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n   * Get a list of all doctors\n   */\n  getAllDoctors(): Observable<Doctor[]> {\n    console.log('getAllDoctors()');\n    return this.httpClient.get<Doctor[]>(baseUri);\n  }\n\n  /**\n   * Get the information about one doctor\n   * @param id of the doctor to get the information for\n   */\n  getDoctorById(id: number): Observable<Doctor> {\n    console.log('getDoctor');\n    return this.httpClient.get<Doctor>(baseUri + '/' + id);\n  }\n\n  /**\n   * Checks the login data for a doctor is valid\n   * @param cred Credentials (email, password) for a doctor\n   */\n  checkLogin(cred: Credentials): Observable<Doctor>{\n    console.log('Login');\n    return this.httpClient.post<Doctor>(baseUri + '/login', JSON.stringify(cred), this.httpOption);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  backendUrl: 'http://localhost:8080',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport {ErrorDialogComponent} from '../error-dialog/error-dialog.component';\nimport {DoctorService} from '../../service/doctor.service';\nimport {UserService} from '../../service/user.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ActivatedRoute} from '@angular/router';\nimport {Doctor} from '../../dto/doctor';\nimport {User} from '../../dto/user';\nimport {QuestService} from '../../service/quest.service';\nimport {Quest} from '../../dto/quest';\nimport {AcceptedQuest} from '../../dto/accepted-quest';\n\n@Component({\n  selector: 'app-patient-doctor-quest',\n  templateUrl: './patient-doctor-quest.component.html',\n  styleUrls: ['./patient-doctor-quest.component.css']\n})\nexport class PatientDoctorQuestComponent implements OnInit {\n\n  patient: any;\n  patientReady = false;\n  doctor: any;\n  assignedQuests: any;\n  availableQuests: any;\n  showAvailable = false;\n  showAssigned = false;\n\n  constructor(private doctorService: DoctorService, private userService: UserService,\n              private dialog: MatDialog, private questService: QuestService, private route: ActivatedRoute) {\n    this.route.queryParams.subscribe(queryParams => {\n      if (queryParams.user !== undefined){\n        console.log('queryParams: ' + queryParams.user);\n        if (!isNaN(Number(sessionStorage.getItem('id'))) && !isNaN(Number(queryParams.user))){\n          this.getUserById(Number(queryParams.user), Number(sessionStorage.getItem('id')));\n          this.getAssignedPatientDoctorQuests(Number(sessionStorage.getItem('id')), Number(queryParams.user));\n          this.getAvailablePatientDoctorQuests(Number(sessionStorage.getItem('id')), Number(queryParams.user));\n        }\n      }\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  public removeQuest(id: number): void{\n    console.log('Remove quest ' + id + ' from user ' + this.patient.firstname + ' ' + this.patient.lastname);\n    this.questService.deleteAssignedDoctorQuestForUser(id, this.patient.id).subscribe(\n      (b: boolean) => {\n        if (b){\n          this.resetValues();\n          this.getAvailablePatientDoctorQuests(this.doctor.id, this.patient.id);\n          this.getAssignedPatientDoctorQuests(this.doctor.id, this.patient.id);\n        }\n        else{\n          this.dialog.open(ErrorDialogComponent, {\n            data: { err: 'Could not remove the quest from the user!', message: 'Could not add the quest to the user!' }\n          });\n        }\n      },\n      error => {\n        this.defaultServiceErrorHandling(error);\n      }\n    );\n  }\n\n  public addQuest(id: number): void{\n    console.log('Add quest ' + id + ' to user ' + this.patient.firstname + ' ' + this.patient.lastname);\n    const accQuest = new AcceptedQuest(id, this.patient.id, new Date());\n    this.questService.addAssignedDoctorQuestForUser(accQuest).subscribe(\n      (b: boolean) => {\n        if (b){\n          this.resetValues();\n          this.getAvailablePatientDoctorQuests(this.doctor.id, this.patient.id);\n          this.getAssignedPatientDoctorQuests(this.doctor.id, this.patient.id);\n        }\n        else{\n          this.dialog.open(ErrorDialogComponent, {\n            data: { err: 'Could not add the quest to the user!', message: 'Could not add the quest to the user!' }\n          });\n        }\n      },\n      error => {\n        this.defaultServiceErrorHandling(error);\n      }\n    );\n  }\n\n  /**\n   * Resets all values for the UI\n   */\n  private resetValues(): void{\n    this.availableQuests = null;\n    this.showAvailable = false;\n    this.assignedQuests = null;\n    this.showAssigned = false;\n  }\n\n  /**\n   * Get the logged in user information\n   * @param user patient of the doctor\n   */\n  private getUserById(user: number, doctor?: number): void{\n    console.log('Get doctor information');\n    this.userService.getUserById(user).subscribe(\n      (u: User) => {\n        this.patient = u;\n        this.patientReady = true;\n        if (doctor !== null && doctor !== undefined){\n          this.getDoctorById(doctor);\n        }\n      },\n      error => {\n        this.defaultServiceErrorHandling(error);\n      }\n    );\n  }\n\n  /**\n   * Get the logged in doctor information\n   * @param doctor that is currently logged in\n   */\n  private getDoctorById(doctor: number): void{\n    console.log('Get doctor information');\n    this.doctorService.getDoctorById(doctor).subscribe(\n      (d: Doctor) => {\n        this.doctor = d;\n      },\n      error => {\n        this.defaultServiceErrorHandling(error);\n      }\n    );\n  }\n\n  /**\n   * Gets the available quests from a doctor for a user\n   * @param doctor of the patient\n   * @param patient to assign the quests for\n   */\n  private getAvailablePatientDoctorQuests(doctor: number, patient: number): void {\n    console.log('Get available patient doctor quests');\n    this.questService.getAvailableDoctorQuestsForUser(doctor, patient).subscribe(\n      (q: Quest[]) => {\n        this.availableQuests = q;\n        this.showAvailable = true;\n      },\n      error => {\n        this.defaultServiceErrorHandling(error);\n      }\n    );\n  }\n\n  /**\n   * Gets the assigned quests from a doctor for a user\n   * @param doctor of the patient\n   * @param patient to assign the quests for\n   */\n  private getAssignedPatientDoctorQuests(doctor: number, patient: number): void {\n    console.log('Get assigned patient doctor quests');\n    this.questService.getAssignedDoctorQuestsForUser(doctor, patient).subscribe(\n      (q: Quest[]) => {\n        this.assignedQuests = q;\n        this.showAssigned = true;\n      },\n      error => {\n        this.defaultServiceErrorHandling(error);\n      }\n    );\n  }\n\n  /**\n   * Showsan error message if an error occurs\n   * @param error that should be displayed\n   */\n  private defaultServiceErrorHandling(error: any): void {\n    console.log(error);\n    this.dialog.open(ErrorDialogComponent, {\n      data: { err: error, message: '' }\n    });\n  }\n}\n","\n<br>\n<h2 *ngIf=\"patientReady\">Choose quests for {{patient.firstname}} {{patient.lastname}}.</h2>\n\n<table>\n  <tr>\n    <th>Active patient quests</th>\n    <th>Available patient quests</th>\n  </tr>\n  <tr>\n    <td>\n      <table mat-table *ngIf=\"showAssigned\" [dataSource]=\"assignedQuests\">\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef> Name </th>\n          <td mat-cell *matCellDef=\"let quest\"> {{quest.name}} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"description\">\n          <th mat-header-cell *matHeaderCellDef> Description </th>\n          <td mat-cell *matCellDef=\"let quest\"> {{quest.description}} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef> Remove </th>\n          <td mat-cell *matCellDef=\"let quest\"><button mat-stroked-button (click)=\"removeQuest(quest.id)\">Remove</button></td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"['name', 'description', 'id']\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: ['name', 'description', 'id']\"></tr>\n      </table>\n    </td>\n    <td>\n      <table mat-table *ngIf=\"showAvailable\" [dataSource]=\"availableQuests\">\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef> Name </th>\n          <td mat-cell *matCellDef=\"let quest\"> {{quest.name}} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"description\">\n          <th mat-header-cell *matHeaderCellDef> Description </th>\n          <td mat-cell *matCellDef=\"let quest\"> {{quest.description}} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef> Remove </th>\n          <td mat-cell *matCellDef=\"let quest\"><button mat-stroked-button (click)=\"addQuest(quest.id)\">Add</button></td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"['name', 'description', 'id']\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: ['name', 'description', 'id']\"></tr>\n        <!-- All quests from doctor -- except the quests that are already in the patient list-->\n      </table>\n    </td>\n  </tr>\n</table>\n\n","import { Component, OnInit } from '@angular/core';\nimport {DoctorService} from '../../service/doctor.service';\nimport {Doctor} from '../../dto/doctor';\nimport {UserService} from '../../service/user.service';\nimport {User} from '../../dto/user';\nimport {MatDialog, MatDialogModule} from '@angular/material/dialog';\nimport {ErrorDialogComponent} from '../error-dialog/error-dialog.component';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-doctor-overview',\n  templateUrl: './doctor-overview.component.html',\n  styleUrls: ['./doctor-overview.component.css']\n})\nexport class DoctorOverviewComponent implements OnInit {\n\n  constructor(private doctorService: DoctorService, private userService: UserService,\n              private dialog: MatDialog, private router: Router) { }\n\n  success = false;\n  patients: any[] = [];\n  doctorLoaded = false;\n  doctor: any;\n\n  ngOnInit(): void {\n    this.getDoctorById(Number(sessionStorage.getItem('id')));\n  }\n\n  /**\n   * Resets the \"successful-box\"\n   */\n  public resetMessage(): void {\n    console.log('Reset successful message');\n    this.success = false;\n  }\n\n  /**\n   * Get all the Patients from the doctor\n   */\n  public getAllPatients(doctor: number): void{\n    console.log('Get all patients of doctor');\n    this.userService.getAllUsersFromDoctor(doctor).subscribe(\n      (u: User[]) => {\n        this.patients = u;\n        this.success = true;\n      },\n      error => {\n        this.defaultServiceErrorHandling(error);\n      }\n    );\n  }\n\n  /**\n   * Redirects to patient-doctor-quest\n   * @param patient id for the quests\n   */\n  public showPatientQuests(patient: number): void {\n    console.log('Get patient doctor quests');\n    this.router.navigate(['doctors/patientquest'], {queryParams: {/*doctor: this.doctor.id, */user: patient}, replaceUrl: true});\n  }\n\n  /**\n   * Get the logged in doctor information\n   * @param doctor that is currently logged in\n   */\n  private getDoctorById(doctor: number): void{\n    console.log('Get doctor information');\n    this.doctorService.getDoctorById(doctor).subscribe(\n      (d: Doctor) => {\n        this.doctor = d;\n        this.doctorLoaded = true;\n      },\n      error => {\n        this.defaultServiceErrorHandling(error);\n      }\n    );\n  }\n\n  /**\n   * Showsan error message if an error occurs\n   * @param error that should be displayed\n   */\n  private defaultServiceErrorHandling(error: any): void {\n    console.log(error);\n    this.dialog.open(ErrorDialogComponent, {\n      data: { err: error, message: '' }\n    });\n    /*\n    Wenn asynchron:\n    const dialogRef = this.dialog.open(ErrorDialogComponent, {\n      data: { err: error, message: '' }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      something();\n    });\n     */\n  }\n}\n","<div *ngIf=\"doctorLoaded\">\n  <br>\n  <h3>Welcome back {{doctor.firstname}} {{doctor.lastname}}!</h3>\n  <br>\n</div>\n\n<button mat-stroked-button (click)=\"getAllPatients(doctor.id)\">Show all patients</button>\n<div *ngIf=\"success\">\n  <table mat-table [dataSource]=\"patients\">\n    <ng-container matColumnDef=\"firstname\">\n      <th mat-header-cell *matHeaderCellDef> Firstname </th>\n      <td mat-cell *matCellDef=\"let pat\"> {{pat.firstname}} </td>\n    </ng-container>\n    <ng-container matColumnDef=\"lastname\">\n      <th mat-header-cell *matHeaderCellDef> Lastname </th>\n      <td mat-cell *matCellDef=\"let pat\"> {{pat.lastname}} </td>\n    </ng-container>\n    <ng-container matColumnDef=\"quests\">\n      <th mat-header-cell *matHeaderCellDef> Quests </th>\n      <td mat-cell *matCellDef=\"let pat\"><button mat-stroked-button (click)=\"showPatientQuests(pat.id)\">Quests</button></td>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"['firstname', 'lastname', 'quests']\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: ['firstname', 'lastname', 'quests']\"></tr>\n  </table>\n</div>\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {User} from '../dto/user';\nimport {environment} from '../../environments/environment';\n\nconst baseUri = environment.backendUrl + '/users';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getAllUsers(): Observable<User[]> {\n    return this.httpClient.get<User[]>(baseUri);\n  }\n\n  getAllUsersFromDoctor(doctorId: number): Observable<User[]> {\n    console.log('getAllUsersFromDoctor');\n    return this.httpClient.get<User[]>(baseUri + '/doctor/' + doctorId);\n  }\n\n  /**\n   * Get the information about one user\n   * @param id of the user to get the information for\n   */\n  getUserById(id: number): Observable<User> {\n    console.log('getUserById');\n    return this.httpClient.get<User>(baseUri + '/' + id);\n  }\n}\n","<mat-toolbar>\n  <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n    <mat-icon>menu</mat-icon>\n  </button>\n  <span>Quest For Health</span>\n  <span class=\"example-spacer\">\n    <span *ngIf=\"doctorLoginService.isUserLoggedIn()\"> <a routerLink=\"/doctors/overview\" class=\"mat-tab-link\"> Patient overview </a> </span>\n    <span><label content=\"_\"></label></span>\n    <span *ngIf=\"doctorLoginService.isUserLoggedIn()\"> <a routerLink=\"/doctors/logout\" class=\"mat-tab-link\"> Doctor Logout </a> </span>\n    <span><label content=\"_\"></label> </span>\n  <span *ngIf=\"!doctorLoginService.isUserLoggedIn()\"> <a routerLink=\"/doctors\" class=\"mat-tab-link\"> Doctor Login </a> </span>\n  </span>\n</mat-toolbar>\n","import { Component, OnInit } from '@angular/core';\nimport {AuthenticationDoctorService} from '../../service/authentication-doctor.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(public doctorLoginService: AuthenticationDoctorService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","export class AcceptedQuest {\n  constructor(\n    public quest: number,\n    public user: number,\n    public acceptedOn: Date) {\n  }\n}\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements  OnInit{\n  title = 'quest-for-health';\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n}\n","<app-header></app-header>\n\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {HttpClientModule} from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DoctorOverviewComponent } from './component/doctor-overview/doctor-overview.component';\nimport { HeaderComponent } from './component/header/header.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatButtonModule} from '@angular/material/button';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { ErrorDialogComponent } from './component/error-dialog/error-dialog.component';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { PatientDoctorQuestComponent } from './component/patient-doctor-quest/patient-doctor-quest.component';\nimport { DoctorComponent } from './component/doctor/doctor.component';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { DoctorLogoutComponent } from './component/doctor-logout/doctor-logout.component';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DoctorOverviewComponent,\n    HeaderComponent,\n    ErrorDialogComponent,\n    PatientDoctorQuestComponent,\n    DoctorComponent,\n    DoctorLogoutComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatTableModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    MatCommonModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  exports: []\n})\nexport class AppModule { }\n/*\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    moduleAngularMaterial,\n    CommonModule\n  ],\n  exports: [\n    moduleAngularMaterial\n  ],\n})\n */\n","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {AuthenticationDoctorService} from '../../service/authentication-doctor.service';\nimport {Credentials} from '../../dto/credentials';\n\n@Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})\nexport class DoctorComponent implements OnInit {\n\n  email = '';\n  password = '';\n\n  constructor(private router: Router, private loginDoctor: AuthenticationDoctorService) {\n  }\n\n  public ngOnInit(): void {\n  }\n\n  /**\n   * Login of a doctor\n   */\n  checkLogin(): void {\n    this.loginDoctor.authenticate(new Credentials(this.email, this.password));\n  }\n}\n","\n\n<!--<mat-card>\n  <div align=\"center\">\n    <mat-card-content >\n      Email : <input type=\"text\" name=\"username\" [(ngModel)]=\"email\">\n      Password : <input type=\"password\" name=\"password\" [(ngModel)]=\"password\">\n      <button (click)=checkLogin() class=\"btn btn-success\">Login</button>\n    </mat-card-content>\n  </div>\n</mat-card>-->\n\n<div align=\"center center\">\n  LOL\n</div>\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Doctor} from '../dto/doctor';\nimport {Quest} from '../dto/quest';\nimport {environment} from '../../environments/environment';\nimport {AcceptedQuest} from '../dto/accepted-quest';\n\nconst baseUri = environment.backendUrl + '/quests';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestService {\n\n  private httpOption = {headers: new HttpHeaders({'Content-Type': 'application/json'})};\n\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n   * Get all the available doctor quests that can be assigned to a user\n   * @param doctor that assigns the quests\n   * @param user that has the quests assigned to\n   */\n  getAvailableDoctorQuestsForUser(doctor: number, user: number): Observable<Quest[]> {\n    console.log('getDoctorAssignedQuestsForUser(' + doctor + ', ' + user + ')');\n    let availableParams = new HttpParams();\n    availableParams = availableParams.set('user', String(user));\n    availableParams = availableParams.set('doctor', String(doctor));\n    console.log(availableParams);\n    return this.httpClient.get<Quest[]>(baseUri + '/available?' + availableParams);\n  }\n\n  /**\n   * Get all the assigned doctor quests are assigned to a user\n   * @param doctor that assigns the quests\n   * @param user that has the quests assigned to\n   */\n  getAssignedDoctorQuestsForUser(doctor: number, user: number): Observable<Quest[]> {\n    console.log('getDoctorAssignedQuestsForUser(' + doctor + ', ' + user + ')');\n    let assignedParams = new HttpParams();\n    assignedParams = assignedParams.set('user', String(user));\n    assignedParams = assignedParams.set('doctor', String(doctor));\n    console.log(assignedParams);\n    return this.httpClient.get<Quest[]>(baseUri + '/assigned?' + assignedParams);\n  }\n\n  /**\n   * Delete an assigned doctor quest for a user\n   * @param quest the quest id\n   * @param user that the quest is assigned to\n   */\n  deleteAssignedDoctorQuestForUser(quest: number, user: number): Observable<boolean>{\n    console.log('deleteAssignedDoctorQuestForUser(' + quest + ', ' + user + ')');\n    return this.httpClient.delete<boolean>(baseUri + '/assigned/' + quest + '/' + user);\n  }\n\n  /**\n   * Adds a new doctor quest for a user\n   * @param accQuest the quest that should be added\n   */\n  addAssignedDoctorQuestForUser(accQuest: AcceptedQuest): Observable<boolean>{\n    console.log('addAssignedDoctorQuestForUser(' + accQuest + ')');\n    const acceptedBody = JSON.stringify(accQuest);\n    return this.httpClient.post<boolean>(baseUri + '/assigned', acceptedBody, this.httpOption);\n  }\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {ErrorData} from '../../entity/error-data';\n\n@Component({\n  selector: 'app-error-dialog',\n  templateUrl: './error-dialog.component.html',\n  styleUrls: ['./error-dialog.component.css']\n})\nexport class ErrorDialogComponent implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ErrorData) {\n    if (data.err === null && data.message !== undefined) {\n      this.data.message = data.message;\n    } else {\n      if (data.err.status === 0) {\n        // If status is 0, the backend is probably down\n        this.data.message = 'The backend seems not to be reachable';\n      } else if (data.err.error.message === 'No message available') {\n        // If no detailed error message is provided, fall back to the simple error name\n        this.data.message = data.err.error.error;\n      } else {\n        this.data.message = data.err.error.message;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2 mat-dialog-title>Error!</h2>\n\n<mat-dialog-content class=\"mat-typography\">\n  <p>{{data.message}}</p>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>OK</button>\n</mat-dialog-actions>\n\n<!--\n.blue-snackbar {\n  background: #f32121;\n}\n-->\n","import { Injectable } from '@angular/core';\nimport {Credentials} from '../dto/credentials';\nimport {DoctorService} from './doctor.service';\nimport {Doctor} from '../dto/doctor';\nimport {ErrorDialogComponent} from '../component/error-dialog/error-dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {Router} from '@angular/router';\nimport {ErrorData} from '../entity/error-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationDoctorService {\n\n  err: ErrorData | undefined;\n\n  constructor(private doctorService: DoctorService, private dialog: MatDialog, private router: Router) { }\n\n  authenticate(cred: Credentials): void {\n    if (cred !== null && cred !== undefined) {\n      this.doctorService.checkLogin(cred).subscribe(\n        (d: Doctor) => {\n          sessionStorage.setItem('id', String(d.id));\n          this.router.navigate(['/doctors/overview']);\n        },\n        error => {\n          this.defaultServiceErrorHandling(error);\n        }\n      );\n    } else {\n      this.defaultServiceErrorHandling('Missing value for email or password!');\n    }\n  }\n\n  /**\n   * Shows an error message if an error occurs\n   * @param error that should be displayed\n   */\n  private defaultServiceErrorHandling(error: any): void {\n    console.log(error);\n    if (typeof error === 'string'){\n      this.dialog.open(ErrorDialogComponent, {\n        data: { err: null, message: error }\n      });\n    }\n    else {\n      this.dialog.open(ErrorDialogComponent, {\n        data: { err: error, message: '' }\n      });\n    }\n\n  }\n\n  isUserLoggedIn(): boolean {\n    const doctor = sessionStorage.getItem('id');\n    console.log(!(doctor === null));\n    return !(doctor === null);\n  }\n\n  logOut(): void {\n    sessionStorage.removeItem('id');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {AuthenticationDoctorService} from './authentication-doctor.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardDoctorService implements CanActivate{\n\n  constructor(private router: Router, private authService: AuthenticationDoctorService) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.authService.isUserLoggedIn()) {\n      return true;\n    }\n    this.router.navigate(['doctors']);\n    return false;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {AuthenticationDoctorService} from '../../service/authentication-doctor.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-doctor-logout',\n  templateUrl: './doctor-logout.component.html',\n  styleUrls: ['./doctor-logout.component.css']\n})\nexport class DoctorLogoutComponent implements OnInit {\n\n  constructor(private router: Router, private authenticationDoctor: AuthenticationDoctorService) { }\n\n  ngOnInit(): void {\n    this.authenticationDoctor.logOut();\n    this.router.navigate(['/doctors']);\n  }\n\n}\n","<p>Logged out</p>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {DoctorOverviewComponent} from './component/doctor-overview/doctor-overview.component';\nimport {PatientDoctorQuestComponent} from './component/patient-doctor-quest/patient-doctor-quest.component';\nimport {DoctorComponent} from './component/doctor/doctor.component';\nimport {DoctorLogoutComponent} from './component/doctor-logout/doctor-logout.component';\nimport {AuthGuardDoctorService} from './service/auth-guard-doctor.service';\nimport {CommonModule} from '@angular/common';\n\nconst routes: Routes = [\n  {path: 'doctors/overview', component: DoctorOverviewComponent, canActivate: [AuthGuardDoctorService]},\n  {path: 'doctors/patientquest', component: PatientDoctorQuestComponent, canActivate: [AuthGuardDoctorService]},\n  {path: 'doctors', component: DoctorComponent},\n  {path: 'doctors/logout', component: DoctorLogoutComponent, canActivate: [AuthGuardDoctorService]}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes),\n    CommonModule],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}